{"ast":null,"code":"var _jsxFileName = \"/home/ironhacker/Documents/M3/droy/src/components/droy/PrivateRoute.js\";\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport firebase from '../../services/firebase';\n\nfunction PrivateRoute(props) {\n  const {\n    component: Comp,\n    location,\n    ...rest\n  } = props; // if (!firebase.auth().currentUser) return <div></div> // It's good????\n\n  return /*#__PURE__*/React.createElement(Route, Object.assign({}, rest, {\n    render: props => firebase.auth().currentUser ? /*#__PURE__*/React.createElement(Comp, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 11\n      }\n    })) : /*#__PURE__*/React.createElement(Redirect, {\n      to: {\n        pathname: '/login',\n        state: {\n          from: location\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 11\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }\n  }));\n}\n\nPrivateRoute.propTypes = {\n  component: PropTypes.func,\n  isLoggedIn: PropTypes.bool,\n  location: PropTypes.object,\n  authLoading: PropTypes.bool\n};\nexport default PrivateRoute;","map":{"version":3,"sources":["/home/ironhacker/Documents/M3/droy/src/components/droy/PrivateRoute.js"],"names":["React","Route","Redirect","PropTypes","firebase","PrivateRoute","props","component","Comp","location","rest","auth","currentUser","pathname","state","from","propTypes","func","isLoggedIn","bool","object","authLoading"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,yBAArB;;AAEA,SAASC,YAAT,CAAuBC,KAAvB,EAA8B;AAC5B,QAAM;AAAEC,IAAAA,SAAS,EAAEC,IAAb;AAAmBC,IAAAA,QAAnB;AAA6B,OAAGC;AAAhC,MAAyCJ,KAA/C,CAD4B,CAE5B;;AACA,sBACE,oBAAC,KAAD,oBAAWI,IAAX;AAAiB,IAAA,MAAM,EACpBJ,KAAD,IAAWF,QAAQ,CAACO,IAAT,GAAgBC,WAAhB,gBACP,oBAAC,IAAD,oBAAUN,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADO,gBAEP,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAE;AAAEO,QAAAA,QAAQ,EAAE,QAAZ;AAAsBC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAEN;AAAR;AAA7B,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAOD;;AAEDJ,YAAY,CAACW,SAAb,GAAyB;AACvBT,EAAAA,SAAS,EAAEJ,SAAS,CAACc,IADE;AAEvBC,EAAAA,UAAU,EAAEf,SAAS,CAACgB,IAFC;AAGvBV,EAAAA,QAAQ,EAAEN,SAAS,CAACiB,MAHG;AAIvBC,EAAAA,WAAW,EAAElB,SAAS,CAACgB;AAJA,CAAzB;AAOA,eAAed,YAAf","sourcesContent":["import React from 'react'\nimport { Route, Redirect } from 'react-router-dom'\nimport PropTypes from 'prop-types'\nimport firebase from '../../services/firebase'\n\nfunction PrivateRoute (props) {\n  const { component: Comp, location, ...rest } = props\n  // if (!firebase.auth().currentUser) return <div></div> // It's good????\n  return (\n    <Route {...rest} render={\n      (props) => firebase.auth().currentUser\n        ? <Comp {...props} />\n        : <Redirect to={{ pathname: '/login', state: { from: location } }} />}\n    />\n  )\n}\n\nPrivateRoute.propTypes = {\n  component: PropTypes.func,\n  isLoggedIn: PropTypes.bool,\n  location: PropTypes.object,\n  authLoading: PropTypes.bool\n}\n\nexport default PrivateRoute\n"]},"metadata":{},"sourceType":"module"}