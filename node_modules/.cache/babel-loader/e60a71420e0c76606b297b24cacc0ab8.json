{"ast":null,"code":"var _jsxFileName = \"/home/ironhacker/Documents/M3/droy/src/contexts/authContext.js\";\nimport React, { Component } from \"react\";\nimport api from \"../services/apiClient\";\nimport { withRouter } from \"react-router-dom\";\nexport const AuthContext = React.createContext();\nexport const withAuth = Comp => {\n  return class WithAuth extends Component {\n    render() {\n      return /*#__PURE__*/React.createElement(AuthContext.Consumer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 9\n        }\n      }, props => {\n        return /*#__PURE__*/React.createElement(Comp, Object.assign({\n          handleLogin: props.handleLogin,\n          user: props.user,\n          authLoading: props.authLoading,\n          loginError: props.loginError,\n          handleSignUp: props.handleSignUp,\n          isLoggedIn: props.isLoggedIn,\n          handleLogout: props.handleLogout\n        }, this.props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 14,\n            columnNumber: 15\n          }\n        }));\n      });\n    }\n\n  };\n};\n\nclass AuthProvider extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      try {\n        const user = await api.get('/auth/whoami');\n        this.setState({\n          authLoading: false,\n          isLoggedIn: true,\n          user\n        });\n      } catch (error) {\n        this.setState({\n          authLoading: false,\n          isLoggedIn: false,\n          user: null\n        });\n      }\n    };\n\n    this.handleLogin = async ({\n      email,\n      hashedPassword\n    }) => {\n      try {\n        const {\n          history\n        } = this.props;\n        const {\n          data: user\n        } = await api.post('/auth/login', {\n          email,\n          hashedPassword\n        });\n        this.setState({\n          isLoggedIn: true,\n          user\n        });\n        history.push('/');\n      } catch (error) {\n        this.setState({\n          isLoggedIn: false,\n          user: null,\n          loginError: error.response.data.errors[0]\n        });\n      }\n    };\n\n    this.handleSignUp = async ({\n      email,\n      hashedPassword\n    }) => {\n      try {\n        const {\n          history\n        } = this.props;\n        const {\n          data: user\n        } = await api.post('/auth/signup', {\n          email,\n          hashedPassword,\n          name,\n          confirmationPassword\n        });\n        this.setState({\n          isLoggedIn: true,\n          user\n        });\n        history.push('/');\n      } catch (error) {\n        this.setState({\n          isLoggedIn: false,\n          user: null,\n          loginError: error.response.data.errors[0]\n        });\n      }\n    };\n\n    this.handleLogout = async () => {\n      try {\n        await api.get('/auth/logout');\n        this.setState({\n          isLoggedIn: false,\n          user: null\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.state = {\n      isLoggedIn: false,\n      user: null,\n      authLoading: true,\n      loginError: \"\"\n    };\n  }\n\n  render() {\n    const {\n      children\n    } = this.props;\n    const {\n      isLoggedIn,\n      user,\n      loginError,\n      authLoading\n    } = this.state;\n    return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n      value: {\n        isLoggedIn,\n        user,\n        authLoading,\n        loginError,\n        handleLogin: this.handleLogin,\n        handleLogout: this.handleLogout,\n        handleSignUp: this.handleSignUp\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 7\n      }\n    }, children);\n  }\n\n}\n\nexport default withRouter(AuthProvider);","map":{"version":3,"sources":["/home/ironhacker/Documents/M3/droy/src/contexts/authContext.js"],"names":["React","Component","api","withRouter","AuthContext","createContext","withAuth","Comp","WithAuth","render","props","handleLogin","user","authLoading","loginError","handleSignUp","isLoggedIn","handleLogout","AuthProvider","constructor","componentDidMount","get","setState","error","email","hashedPassword","history","data","post","push","response","errors","name","confirmationPassword","console","log","state","children"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport api from \"../services/apiClient\";\nimport { withRouter } from \"react-router-dom\";\n\nexport const AuthContext = React.createContext();\n\nexport const withAuth = (Comp) => {\n  return class WithAuth extends Component {\n    render() {\n      return (\n        <AuthContext.Consumer>\n          {(props) => {\n            return (\n              <Comp\n                handleLogin={props.handleLogin}\n                user={props.user}\n                authLoading={props.authLoading}\n                loginError={props.loginError}\n                handleSignUp={props.handleSignUp}\n                isLoggedIn={props.isLoggedIn}\n                handleLogout={props.handleLogout}\n                {...this.props}\n              />\n            );\n          }}\n        </AuthContext.Consumer>\n      );\n    }\n  };\n};\n\nclass AuthProvider extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      isLoggedIn: false,\n      user: null,\n      authLoading: true,\n      loginError: \"\"\n    };\n  }\n\n  componentDidMount = async () => {\n    try {\n      const user = await api.get('/auth/whoami')\n      this.setState({\n        authLoading: false,\n        isLoggedIn: true,\n        user,\n      })\n      \n    } catch (error) {\n      this.setState({\n        authLoading: false,\n        isLoggedIn: false,\n        user: null,\n      })      \n    }\n  }\n\n  handleLogin = async ({ email, hashedPassword }) => {\n    try {\n      const { history } = this.props\n      const { data: user } = await api.post('/auth/login', { email, hashedPassword })\n      this.setState({\n        isLoggedIn: true,\n        user,\n      });\n      history.push('/')\n    } catch (error) {\n      this.setState({\n        isLoggedIn: false,\n        user: null,\n        loginError: error.response.data.errors[0]\n      })      \n    }\n  };\n\n\n  handleSignUp = async ({ email, hashedPassword }) => {\n    try {\n      const { history } = this.props\n      const { data: user } = await api.post('/auth/signup', { email, hashedPassword, name, confirmationPassword })\n      this.setState({\n        isLoggedIn: true,\n        user,\n      });\n      history.push('/')\n    } catch (error) {\n      this.setState({\n        isLoggedIn: false,\n        user: null,\n        loginError: error.response.data.errors[0]\n      })      \n    }\n  };\n\n  handleLogout = async () => {\n    try {\n      await api.get('/auth/logout')\n      this.setState({\n        isLoggedIn: false,\n        user: null,\n      });\n      \n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    const { isLoggedIn, user, loginError, authLoading } = this.state;\n    return (\n      <AuthContext.Provider\n        value={{\n          isLoggedIn,\n          user,\n          authLoading,\n          loginError,\n          handleLogin: this.handleLogin,\n          handleLogout: this.handleLogout,\n          handleSignUp: this.handleSignUp\n        }}\n      >\n        {children}\n      </AuthContext.Provider>\n    );\n  }\n}\n\nexport default withRouter(AuthProvider);"]},"metadata":{},"sourceType":"module"}