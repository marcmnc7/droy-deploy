{"ast":null,"code":"var _jsxFileName = \"/home/ironhacker/Documents/M3/droy/src/components/droy/PrivateRoute.js\";\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { withAuth } from '../../contexts/authContext';\n\nfunction PrivateRoute(props) {\n  const {\n    isLoggedIn,\n    component: Comp,\n    location,\n    ...rest\n  } = props;\n  console.log(isLoggedIn);\n  return /*#__PURE__*/React.createElement(Route, Object.assign({}, rest, {\n    render: props => isLoggedIn ? /*#__PURE__*/React.createElement(Comp, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 11\n      }\n    })) : /*#__PURE__*/React.createElement(Redirect, {\n      to: {\n        pathname: '/login',\n        state: {\n          from: location\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 11\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }\n  }));\n}\n\nPrivateRoute.propTypes = {\n  component: PropTypes.func,\n  isLoggedIn: PropTypes.bool,\n  location: PropTypes.string\n};\nexport default withAuth(PrivateRoute);","map":{"version":3,"sources":["/home/ironhacker/Documents/M3/droy/src/components/droy/PrivateRoute.js"],"names":["React","Route","Redirect","PropTypes","withAuth","PrivateRoute","props","isLoggedIn","component","Comp","location","rest","console","log","pathname","state","from","propTypes","func","bool","string"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,QAAT,QAAyB,4BAAzB;;AAEA,SAASC,YAAT,CAAuBC,KAAvB,EAA8B;AAC5B,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,SAAS,EAAEC,IAAzB;AAA+BC,IAAAA,QAA/B;AAAyC,OAAGC;AAA5C,MAAqDL,KAA3D;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYN,UAAZ;AACA,sBACE,oBAAC,KAAD,oBAAWI,IAAX;AAAiB,IAAA,MAAM,EACpBL,KAAD,IAAWC,UAAU,gBACjB,oBAAC,IAAD,oBAAUD,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADiB,gBAEjB,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAE;AAAEQ,QAAAA,QAAQ,EAAE,QAAZ;AAAsBC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAEN;AAAR;AAA7B,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAOD;;AAEDL,YAAY,CAACY,SAAb,GAAyB;AACvBT,EAAAA,SAAS,EAAEL,SAAS,CAACe,IADE;AAEvBX,EAAAA,UAAU,EAAEJ,SAAS,CAACgB,IAFC;AAGvBT,EAAAA,QAAQ,EAAEP,SAAS,CAACiB;AAHG,CAAzB;AAMA,eAAehB,QAAQ,CAACC,YAAD,CAAvB","sourcesContent":["import React from 'react'\nimport { Route, Redirect } from 'react-router-dom'\nimport PropTypes from 'prop-types'\nimport { withAuth } from '../../contexts/authContext'\n\nfunction PrivateRoute (props) {\n  const { isLoggedIn, component: Comp, location, ...rest } = props\n  console.log(isLoggedIn)\n  return (\n    <Route {...rest} render={\n      (props) => isLoggedIn\n        ? <Comp {...props} />\n        : <Redirect to={{ pathname: '/login', state: { from: location } }} />}\n    />\n  )\n}\n\nPrivateRoute.propTypes = {\n  component: PropTypes.func,\n  isLoggedIn: PropTypes.bool,\n  location: PropTypes.string\n}\n\nexport default withAuth(PrivateRoute)\n"]},"metadata":{},"sourceType":"module"}