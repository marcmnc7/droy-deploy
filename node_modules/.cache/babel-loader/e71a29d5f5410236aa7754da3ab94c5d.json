{"ast":null,"code":"var _jsxFileName = \"/home/ironhacker/Documents/M3/droy/src/components/droy/UserComponentBase.js\";\nimport React, { Component } from 'react';\nimport MATCH_COMPONENTS from '../../utils/componentsMatching';\nimport PropTypes from 'prop-types';\nimport { withData } from '../../contexts/dataContext';\n\nclass UserComponentBase extends Component {\n  constructor(props) {\n    super(props);\n\n    this.changeInfo = e => {\n      const {\n        saveComponentInfoToContext\n      } = this.props;\n      const {\n        info,\n        code\n      } = this.state;\n      const newText = prompt('Inserta el nuevo texto');\n      const newInfo = { ...info\n      };\n      newInfo[e.target.id] = newText;\n      this.setState({\n        info: newInfo\n      });\n      saveComponentInfoToContext(newInfo, code);\n    };\n\n    this.componentDidUpdate = () => {\n      console.log('User component base -> component did update');\n      /* const { saveInfoToContext } = this.props\n      const { info } = this.state\n      saveInfoToContext(info) */\n    };\n\n    this.state = {\n      info: this.props.info,\n      code: this.props.code\n    };\n  }\n\n  render() {\n    const {\n      code\n    } = this.props;\n    const UserComp = MATCH_COMPONENTS[code];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(UserComp, Object.assign({\n      changeInfo: this.changeInfo,\n      updateInfo: this.updateInfo\n    }, this.state, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nUserComponentBase.propTypes = {\n  code: PropTypes.string\n};\nexport default withData(UserComponentBase);","map":{"version":3,"sources":["/home/ironhacker/Documents/M3/droy/src/components/droy/UserComponentBase.js"],"names":["React","Component","MATCH_COMPONENTS","PropTypes","withData","UserComponentBase","constructor","props","changeInfo","e","saveComponentInfoToContext","info","code","state","newText","prompt","newInfo","target","id","setState","componentDidUpdate","console","log","render","UserComp","updateInfo","propTypes","string"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,gBAAP,MAA6B,gCAA7B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,QAAT,QAAyB,4BAAzB;;AAEA,MAAMC,iBAAN,SAAgCJ,SAAhC,CAA0C;AACxCK,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAClB,UAAMA,KAAN;;AADkB,SAQpBC,UARoB,GAQNC,CAAD,IAAO;AAClB,YAAM;AAAEC,QAAAA;AAAF,UAAiC,KAAKH,KAA5C;AACA,YAAM;AAAEI,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAiB,KAAKC,KAA5B;AACA,YAAMC,OAAO,GAAGC,MAAM,CAAC,wBAAD,CAAtB;AACA,YAAMC,OAAO,GAAG,EAAC,GAAGL;AAAJ,OAAhB;AACAK,MAAAA,OAAO,CAACP,CAAC,CAACQ,MAAF,CAASC,EAAV,CAAP,GAAuBJ,OAAvB;AACA,WAAKK,QAAL,CAAc;AAAER,QAAAA,IAAI,EAAEK;AAAR,OAAd;AACAN,MAAAA,0BAA0B,CAACM,OAAD,EAAUJ,IAAV,CAA1B;AACD,KAhBmB;;AAAA,SAkBpBQ,kBAlBoB,GAkBC,MAAM;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAY,6CAAZ;AACA;;;AAGD,KAvBmB;;AAElB,SAAKT,KAAL,GAAa;AACXF,MAAAA,IAAI,EAAE,KAAKJ,KAAL,CAAWI,IADN;AAEXC,MAAAA,IAAI,EAAE,KAAKL,KAAL,CAAWK;AAFN,KAAb;AAID;;AAmBDW,EAAAA,MAAM,GAAI;AACR,UAAM;AAAEX,MAAAA;AAAF,QAAW,KAAKL,KAAtB;AACA,UAAMiB,QAAQ,GAAGtB,gBAAgB,CAACU,IAAD,CAAjC;AACA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,QAAD;AAAU,MAAA,UAAU,EAAE,KAAKJ,UAA3B;AAAuC,MAAA,UAAU,EAAE,KAAKiB;AAAxD,OAAwE,KAAKZ,KAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADJ,CADF;AAKD;;AAlCuC;;AAqC1CR,iBAAiB,CAACqB,SAAlB,GAA8B;AAC5Bd,EAAAA,IAAI,EAAET,SAAS,CAACwB;AADY,CAA9B;AAIA,eAAevB,QAAQ,CAACC,iBAAD,CAAvB","sourcesContent":["import React, { Component } from 'react'\nimport MATCH_COMPONENTS from '../../utils/componentsMatching'\nimport PropTypes from 'prop-types'\nimport { withData } from '../../contexts/dataContext'\n\nclass UserComponentBase extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      info: this.props.info,\n      code: this.props.code,\n    }\n  }\n\n  changeInfo = (e) => {\n    const { saveComponentInfoToContext } = this.props\n    const { info, code } = this.state\n    const newText = prompt('Inserta el nuevo texto')\n    const newInfo = {...info}\n    newInfo[e.target.id] = newText\n    this.setState({ info: newInfo })\n    saveComponentInfoToContext(newInfo, code)\n  }\n\n  componentDidUpdate = () => {\n    console.log('User component base -> component did update')\n    /* const { saveInfoToContext } = this.props\n    const { info } = this.state\n    saveInfoToContext(info) */\n  }\n\n  render () {\n    const { code } = this.props\n    const UserComp = MATCH_COMPONENTS[code]\n    return (\n      <div>\n        { <UserComp changeInfo={this.changeInfo} updateInfo={this.updateInfo} {...this.state }/> }\n      </div>\n    )\n  }\n}\n\nUserComponentBase.propTypes = {\n  code: PropTypes.string\n}\n\nexport default withData(UserComponentBase)"]},"metadata":{},"sourceType":"module"}