{"ast":null,"code":"var _jsxFileName = \"/home/ironhacker/Documents/M3/droy/src/components/droy/UserComponentBase.js\";\nimport React, { Component } from 'react';\nimport MATCH_COMPONENTS from '../../utils/componentsMatching';\nimport PropTypes from 'prop-types';\nimport { withData } from '../../contexts/dataContext';\nimport OptionsBar from '../droy/OptionsBar';\n\nclass UserComponentBase extends Component {\n  constructor(props) {\n    super(props);\n\n    this.changeInfo = e => {\n      const {\n        code\n      } = this.props;\n      const {\n        saveComponentInfoToContext\n      } = this.props;\n      const newText = prompt('Inserta el nuevo texto');\n      console.log('in change info componentbase', code, e.target.attributes['data-id'].value);\n      const attr = e.target.attributes['data-id'].value;\n      this.setState({\n        imChanged: true\n      });\n      saveComponentInfoToContext(code, attr, newText);\n    };\n\n    this.getComponentInfo = () => {\n      const {\n        userLayoutObj,\n        code\n      } = this.props;\n      return userLayoutObj.filter(c => c.code === code)[0].info;\n    };\n\n    this.state = {\n      imChanged: false\n      /*\n      info: {...this.props.info},\n      code: this.props.code, */\n\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextProps.mode !== this.props.mode) return true;\n    if (!nextState.imChanged) return false;\n    this.setState({\n      imChanged: false\n    });\n    return true;\n  }\n\n  render() {\n    const {\n      mode,\n      moveDownComponent,\n      code\n    } = this.props;\n    const UserComp = MATCH_COMPONENTS[code];\n    console.log('UserComponentBase rendering... ', code);\n    const componentProps = {\n      info: this.getComponentInfo()\n    };\n\n    if (mode === 'edit') {\n      componentProps['code'] = code;\n      componentProps['changeInfo'] = this.changeInfo;\n      componentProps['updateInfo'] = this.updateInfo;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"user-component-base\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(UserComp, Object.assign({}, componentProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }), mode === \"edit\" && /*#__PURE__*/React.createElement(OptionsBar, {\n      moveDownComponent: moveDownComponent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 31\n      }\n    })));\n  }\n\n}\n\nUserComponentBase.propTypes = {\n  code: PropTypes.string\n};\nexport default withData(UserComponentBase);","map":{"version":3,"sources":["/home/ironhacker/Documents/M3/droy/src/components/droy/UserComponentBase.js"],"names":["React","Component","MATCH_COMPONENTS","PropTypes","withData","OptionsBar","UserComponentBase","constructor","props","changeInfo","e","code","saveComponentInfoToContext","newText","prompt","console","log","target","attributes","value","attr","setState","imChanged","getComponentInfo","userLayoutObj","filter","c","info","state","shouldComponentUpdate","nextProps","nextState","mode","render","moveDownComponent","UserComp","componentProps","updateInfo","propTypes","string"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport MATCH_COMPONENTS from '../../utils/componentsMatching'\nimport PropTypes from 'prop-types'\nimport { withData } from '../../contexts/dataContext'\nimport OptionsBar from '../droy/OptionsBar'\n\nclass UserComponentBase extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      imChanged: false\n      /*\n      info: {...this.props.info},\n      code: this.props.code, */\n    }\n  }\n\n  changeInfo = (e) => {\n    const { code } = this.props\n    const { saveComponentInfoToContext } = this.props\n    const newText = prompt('Inserta el nuevo texto')\n    console.log('in change info componentbase', code, e.target.attributes['data-id'].value)\n    const attr = e.target.attributes['data-id'].value\n    this.setState({ imChanged: true })\n    saveComponentInfoToContext(code, attr, newText)\n  }\n\n\n  getComponentInfo = () => {\n    const { userLayoutObj, code } = this.props\n    return userLayoutObj.filter(c => c.code === code)[0].info\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if(nextProps.mode !== this.props.mode) return true \n    if(!nextState.imChanged) return false\n    this.setState({ imChanged: false })\n    return true\n  }\n  \n  \n  render () {\n    const { mode, moveDownComponent, code  } = this.props\n    const UserComp = MATCH_COMPONENTS[code]\n    console.log('UserComponentBase rendering... ', code)\n    const componentProps = { info: this.getComponentInfo() }\n    if(mode === 'edit'){\n      componentProps['code'] = code\n      componentProps['changeInfo'] = this.changeInfo\n      componentProps['updateInfo'] = this.updateInfo\n    }\n    return (\n      <div className=\"user-component-base\">\n        <UserComp {...componentProps}>\n          {mode === \"edit\" && <OptionsBar moveDownComponent={moveDownComponent}/>}\n        </UserComp>\n      </div>\n    )\n  }\n}\n\nUserComponentBase.propTypes = {\n  code: PropTypes.string\n}\n\nexport default withData(UserComponentBase)"]},"metadata":{},"sourceType":"module"}