{"ast":null,"code":"var _jsxFileName = \"/home/ironhacker/Documents/M3/droy/src/components/droy/PrivateRoute.js\";\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { withAuth } from '../../contexts/authContext';\n\nfunction PrivateRoute(props) {\n  const {\n    authLoading,\n    isLoggedIn,\n    component: Comp,\n    location,\n    ...rest\n  } = props;\n  if (!authLoading) return;\n  return /*#__PURE__*/React.createElement(Route, Object.assign({}, rest, {\n    render: props => isLoggedIn ? /*#__PURE__*/React.createElement(Comp, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 11\n      }\n    })) : /*#__PURE__*/React.createElement(Redirect, {\n      to: {\n        pathname: '/login',\n        state: {\n          from: location\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 11\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }\n  }));\n}\n\nPrivateRoute.propTypes = {\n  component: PropTypes.func,\n  isLoggedIn: PropTypes.bool,\n  location: PropTypes.string,\n  authLoading: PropTypes.bool\n};\nexport default withAuth(PrivateRoute);","map":{"version":3,"sources":["/home/ironhacker/Documents/M3/droy/src/components/droy/PrivateRoute.js"],"names":["React","Route","Redirect","PropTypes","withAuth","PrivateRoute","props","authLoading","isLoggedIn","component","Comp","location","rest","pathname","state","from","propTypes","func","bool","string"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,QAAT,QAAyB,4BAAzB;;AAEA,SAASC,YAAT,CAAuBC,KAAvB,EAA8B;AAC5B,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,UAAf;AAA2BC,IAAAA,SAAS,EAAEC,IAAtC;AAA4CC,IAAAA,QAA5C;AAAsD,OAAGC;AAAzD,MAAkEN,KAAxE;AACA,MAAI,CAACC,WAAL,EAAkB;AAClB,sBACE,oBAAC,KAAD,oBAAWK,IAAX;AAAiB,IAAA,MAAM,EACpBN,KAAD,IAAWE,UAAU,gBACjB,oBAAC,IAAD,oBAAUF,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADiB,gBAEjB,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAE;AAAEO,QAAAA,QAAQ,EAAE,QAAZ;AAAsBC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAEJ;AAAR;AAA7B,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAOD;;AAEDN,YAAY,CAACW,SAAb,GAAyB;AACvBP,EAAAA,SAAS,EAAEN,SAAS,CAACc,IADE;AAEvBT,EAAAA,UAAU,EAAEL,SAAS,CAACe,IAFC;AAGvBP,EAAAA,QAAQ,EAAER,SAAS,CAACgB,MAHG;AAIvBZ,EAAAA,WAAW,EAAEJ,SAAS,CAACe;AAJA,CAAzB;AAOA,eAAed,QAAQ,CAACC,YAAD,CAAvB","sourcesContent":["import React from 'react'\nimport { Route, Redirect } from 'react-router-dom'\nimport PropTypes from 'prop-types'\nimport { withAuth } from '../../contexts/authContext'\n\nfunction PrivateRoute (props) {\n  const { authLoading, isLoggedIn, component: Comp, location, ...rest } = props\n  if (!authLoading) return\n  return (\n    <Route {...rest} render={\n      (props) => isLoggedIn\n        ? <Comp {...props} />\n        : <Redirect to={{ pathname: '/login', state: { from: location } }} />}\n    />\n  )\n}\n\nPrivateRoute.propTypes = {\n  component: PropTypes.func,\n  isLoggedIn: PropTypes.bool,\n  location: PropTypes.string,\n  authLoading: PropTypes.bool\n}\n\nexport default withAuth(PrivateRoute)\n"]},"metadata":{},"sourceType":"module"}