{"ast":null,"code":"var _jsxFileName = \"/home/ironhacker/Documents/M3/deploy/src/contexts/dataContext.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport api from '../services/apiClient';\nimport alias from '../utils/alias';\nconst DataContext = React.createContext();\nexport const withData = Comp => {\n  return class WithData extends Component {\n    render() {\n      return /*#__PURE__*/React.createElement(DataContext.Consumer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 9\n        }\n      }, props => /*#__PURE__*/React.createElement(Comp, Object.assign({}, this.props, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 23\n        }\n      })));\n    }\n\n  };\n};\n\nclass DataProvider extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getProjectInfo = async projectId => {\n      try {\n        const {\n          data: {\n            componentsConfiguration,\n            style,\n            _id\n          }\n        } = await api.get(`/projects/${projectId}`);\n        console.log(componentsConfiguration);\n        this.setState({\n          projectId: _id,\n          userLayoutObj: componentsConfiguration,\n          projectStyle: style\n        });\n      } catch (error) {\n        this.setState({\n          dataError: \"Unable to get your project data\"\n        });\n      }\n    };\n\n    this.state = {\n      userLayoutObj: [],\n      projectStyle: \"\",\n      projectId: \"\",\n      dataError: \"\"\n    };\n  }\n  /* Get project info to BBDD based on the project ID */\n\n\n  render() {\n    const {\n      children\n    } = this.props;\n    return /*#__PURE__*/React.createElement(DataContext.Provider, {\n      value: {\n        getProjectInfo: this.getProjectInfo,\n        ...this.state\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, children);\n  }\n\n}\n\nDataProvider.propTypes = {\n  children: PropTypes.node\n};\nexport default DataProvider;","map":{"version":3,"sources":["/home/ironhacker/Documents/M3/deploy/src/contexts/dataContext.js"],"names":["React","Component","PropTypes","api","alias","DataContext","createContext","withData","Comp","WithData","render","props","DataProvider","constructor","getProjectInfo","projectId","data","componentsConfiguration","style","_id","get","console","log","setState","userLayoutObj","projectStyle","error","dataError","state","children","propTypes","node"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AAEA,MAAMC,WAAW,GAAGL,KAAK,CAACM,aAAN,EAApB;AAEA,OAAO,MAAMC,QAAQ,GAAIC,IAAD,IAAU;AAChC,SAAO,MAAMC,QAAN,SAAuBR,SAAvB,CAAiC;AACtCS,IAAAA,MAAM,GAAG;AACP,0BACE,oBAAC,WAAD,CAAa,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACIC,KAAD,iBAAW,oBAAC,IAAD,oBAAU,KAAKA,KAAf,EAA0BA,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADd,CADF;AAKD;;AAPqC,GAAxC;AASD,CAVM;;AAYP,MAAMC,YAAN,SAA2BX,SAA3B,CAAqC;AACnCY,EAAAA,WAAW,CAACF,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAWnBG,cAXmB,GAWF,MAAOC,SAAP,IAAqB;AACpC,UAAI;AACF,cAAM;AAAEC,UAAAA,IAAI,EAAE;AAAEC,YAAAA,uBAAF;AAA2BC,YAAAA,KAA3B;AAAkCC,YAAAA;AAAlC;AAAR,YAAoD,MAAMhB,GAAG,CAACiB,GAAJ,CAAS,aAAYL,SAAU,EAA/B,CAAhE;AACAM,QAAAA,OAAO,CAACC,GAAR,CAAYL,uBAAZ;AACA,aAAKM,QAAL,CAAc;AACZR,UAAAA,SAAS,EAAEI,GADC;AAEZK,UAAAA,aAAa,EAAEP,uBAFH;AAGZQ,UAAAA,YAAY,EAAEP;AAHF,SAAd;AAKD,OARD,CAQE,OAAOQ,KAAP,EAAc;AACd,aAAKH,QAAL,CAAc;AAAEI,UAAAA,SAAS,EAAE;AAAb,SAAd;AACD;AACF,KAvBkB;;AAEjB,SAAKC,KAAL,GAAa;AACXJ,MAAAA,aAAa,EAAE,EADJ;AAEXC,MAAAA,YAAY,EAAE,EAFH;AAGXV,MAAAA,SAAS,EAAE,EAHA;AAIXY,MAAAA,SAAS,EAAE;AAJA,KAAb;AAMD;AAED;;;AAeAjB,EAAAA,MAAM,GAAI;AACR,UAAM;AAAEmB,MAAAA;AAAF,QAAe,KAAKlB,KAA1B;AACA,wBACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAE;AAC3BG,QAAAA,cAAc,EAAE,KAAKA,cADM;AAE3B,WAAG,KAAKc;AAFmB,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIGC,QAJH,CADF;AAQD;;AApCkC;;AAuCrCjB,YAAY,CAACkB,SAAb,GAAyB;AACvBD,EAAAA,QAAQ,EAAE3B,SAAS,CAAC6B;AADG,CAAzB;AAIA,eAAenB,YAAf","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport api from '../services/apiClient'\nimport alias from '../utils/alias'\n\nconst DataContext = React.createContext()\n\nexport const withData = (Comp) => {\n  return class WithData extends Component {\n    render() {\n      return (\n        <DataContext.Consumer>\n          {(props) => <Comp {...this.props} {...props} />}\n        </DataContext.Consumer>\n      )\n    }\n  }\n}\n\nclass DataProvider extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      userLayoutObj: [],\n      projectStyle: \"\",\n      projectId: \"\",\n      dataError: \"\"\n    }\n  }\n\n  /* Get project info to BBDD based on the project ID */\n  getProjectInfo = async (projectId) => {\n    try {\n      const { data: { componentsConfiguration, style, _id } } = await api.get(`/projects/${projectId}`)\n      console.log(componentsConfiguration)\n      this.setState({\n        projectId: _id,\n        userLayoutObj: componentsConfiguration,\n        projectStyle: style,\n      })\n    } catch (error) {\n      this.setState({ dataError: \"Unable to get your project data\" })\n    }\n  }\n\n  render () {\n    const { children } = this.props\n    return (\n      <DataContext.Provider value={{\n        getProjectInfo: this.getProjectInfo,\n        ...this.state\n      }}>\n        {children}\n      </DataContext.Provider>\n    )\n  }\n}\n\nDataProvider.propTypes = {\n  children: PropTypes.node\n}\n\nexport default DataProvider\n"]},"metadata":{},"sourceType":"module"}