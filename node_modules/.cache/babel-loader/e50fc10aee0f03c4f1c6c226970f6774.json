{"ast":null,"code":"var _jsxFileName = \"/home/ironhacker/Documents/M3/droy/src/contexts/dataContext.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nconst DataContext = React.createContext(); // Consumer Wrapper\n\nexport const withData = Comp => {\n  return class WithData extends Component {\n    render() {\n      return /*#__PURE__*/React.createElement(DataContext.Consumer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 9\n        }\n      }, props => /*#__PURE__*/React.createElement(Comp, Object.assign({}, this.props, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 24\n        }\n      })));\n    }\n\n  };\n}; // Provider def\n\nclass DataProvider extends Component {\n  constructor(props) {\n    super(props);\n\n    this.switchMode = () => {\n      const {\n        mode\n      } = this.state;\n      this.setState({\n        mode: mode === 'edit' ? 'view' : 'edit'\n      });\n    };\n\n    this.copyUserLayoutObjToContext = u => {\n      this.setState({\n        userLayoutObj: u\n      });\n    };\n\n    this.moveDownComponent = elementCode => {\n      const stateCopy = { ...this.state\n      };\n      const {\n        userLayoutObj: newUserLayoutObj\n      } = stateCopy;\n      let fromIndex = 0;\n      let element;\n\n      for (let i = 0; i < newUserLayoutObj.length; i++) {\n        const c = newUserLayoutObj[i];\n\n        if (c.code === elementCode) {\n          element = c;\n          fromIndex = i;\n          break;\n        }\n      }\n\n      if (!element) return;\n      newUserLayoutObj.splice(fromIndex, 1);\n      newUserLayoutObj.splice(fromIndex + 1, 0, element);\n      this.setState({\n        userLayoutObj: newUserLayoutObj\n      });\n    };\n\n    this.saveComponentInfoToContext = (componentCode, componentAttr, attrContent) => {\n      const stateCopy = { ...this.state\n      };\n      const {\n        userLayoutObj: newUserLayoutObj\n      } = stateCopy;\n\n      for (const userObject of newUserLayoutObj) {\n        if (userObject.code === componentCode) {\n          userObject.info[componentAttr] = attrContent;\n        }\n      }\n\n      console.log(44, newUserLayoutObj);\n      this.setState({\n        userLayoutObj: newUserLayoutObj\n      });\n    };\n\n    this.save = () => {\n      console.log(\"Saving info:\", this.state.userLayoutObj);\n    };\n\n    this.addComponent = (componentCode, defaultInfo) => {\n      const stateCopy = { ...this.state\n      };\n      stateCopy.userLayoutObj.push({\n        code: componentCode,\n        info: defaultInfo\n      });\n      this.setState({\n        userLayoutObj: stateCopy.userLayoutObj\n      });\n    };\n\n    this.state = {\n      mode: 'edit',\n      userLayoutObj: []\n    };\n  }\n  /* SWITCH MODES */\n\n\n  render() {\n    const {\n      children\n    } = this.props;\n    return /*#__PURE__*/React.createElement(DataContext.Provider, {\n      value: {\n        saveComponentInfoToContext: this.saveComponentInfoToContext,\n        getUserLayoutObj: this.getUserLayoutObj,\n        copyUserLayoutObjToContext: this.copyUserLayoutObjToContext,\n        switchMode: this.switchMode,\n        moveDownComponent: this.moveDownComponent,\n        addComponent: this.addComponent,\n        save: this.save,\n        ...this.state\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }\n    }, children);\n  }\n\n}\n\nDataProvider.propTypes = {\n  children: PropTypes.node\n};\nexport default DataProvider;","map":{"version":3,"sources":["/home/ironhacker/Documents/M3/droy/src/contexts/dataContext.js"],"names":["React","Component","PropTypes","DataContext","createContext","withData","Comp","WithData","render","props","DataProvider","constructor","switchMode","mode","state","setState","copyUserLayoutObjToContext","u","userLayoutObj","moveDownComponent","elementCode","stateCopy","newUserLayoutObj","fromIndex","element","i","length","c","code","splice","saveComponentInfoToContext","componentCode","componentAttr","attrContent","userObject","info","console","log","save","addComponent","defaultInfo","push","children","getUserLayoutObj","propTypes","node"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nconst DataContext = React.createContext()\n\n// Consumer Wrapper\nexport const withData = (Comp) => {\n  return class WithData extends Component {\n    render () {\n      return (\n        <DataContext.Consumer>\n          { (props) => <Comp {...this.props} {...props} /> }\n        </DataContext.Consumer>\n      )\n    }\n  }\n}\n\n// Provider def\nclass DataProvider extends Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      mode: 'edit',\n      userLayoutObj: []\n    }\n  }\n\n  /* SWITCH MODES */\n  switchMode = () => {\n    const { mode } = this.state\n    this.setState({ mode: mode === 'edit' ? 'view': 'edit' })\n  }\n\n  \n  copyUserLayoutObjToContext = (u) => {\n    this.setState({\n      userLayoutObj: u\n    })\n  }\n  \n\n  moveDownComponent = (elementCode) => {\n    const stateCopy = {...this.state}\n    const { userLayoutObj: newUserLayoutObj } = stateCopy\n    let fromIndex = 0; let element\n    for (let i = 0; i < newUserLayoutObj.length; i++) {\n      const c = newUserLayoutObj[i];\n      if(c.code === elementCode) {\n        element = c; fromIndex = i; break\n      }\n    }\n    if(!element) return\n    newUserLayoutObj.splice(fromIndex, 1)\n    newUserLayoutObj.splice(fromIndex + 1, 0, element)\n    this.setState({ userLayoutObj: newUserLayoutObj })\n  }\n\n  saveComponentInfoToContext = (componentCode, componentAttr, attrContent) => {\n    const stateCopy = {...this.state}\n    const { userLayoutObj: newUserLayoutObj } = stateCopy\n    for (const userObject of newUserLayoutObj) {\n      if(userObject.code === componentCode) {\n        userObject.info[componentAttr] = attrContent\n      }\n    }\n    console.log(44, newUserLayoutObj)\n    this.setState({\n      userLayoutObj: newUserLayoutObj\n    })\n  };\n\n\n  save = () => {\n    console.log(\"Saving info:\", this.state.userLayoutObj)\n  }\n\n\n  addComponent = (componentCode, defaultInfo) => {\n    const stateCopy = {...this.state}\n    stateCopy.userLayoutObj.push({\n      code: componentCode,\n      info: defaultInfo\n    })\n    this.setState({\n      userLayoutObj: stateCopy.userLayoutObj\n    })\n  }\n\n\n  render () {\n    const { children } = this.props\n    \n    return (\n      <DataContext.Provider value={{\n        saveComponentInfoToContext: this.saveComponentInfoToContext,\n        getUserLayoutObj: this.getUserLayoutObj,\n        copyUserLayoutObjToContext: this.copyUserLayoutObjToContext,\n        switchMode: this.switchMode,\n        moveDownComponent: this.moveDownComponent,\n        addComponent: this.addComponent,\n        save: this.save,\n        ...this.state\n        \n      }}>\n        {children}\n      </DataContext.Provider>\n    )\n  }\n}\n\nDataProvider.propTypes = {\n  children: PropTypes.node\n}\n\nexport default DataProvider\n"]},"metadata":{},"sourceType":"module"}