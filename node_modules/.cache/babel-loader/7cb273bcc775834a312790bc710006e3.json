{"ast":null,"code":"var _jsxFileName = \"/home/ironhacker/Documents/M3/droy/src/components/droy/UserComponentBase.js\";\nimport React, { Component } from 'react';\nimport MATCH_COMPONENTS from '../../utils/componentsMatching';\nimport PropTypes from 'prop-types';\nimport { withData } from '../../contexts/dataContext';\nimport OptionsBar from '../droy/OptionsBar';\nimport '../../styles/user-componentBase.css';\n\nclass UserComponentBase extends Component {\n  constructor(props) {\n    super(props);\n\n    this.changeInfo = e => {\n      const {\n        code\n      } = this.props;\n      const {\n        saveComponentInfoToContext\n      } = this.props;\n      const newText = prompt('Inserta el nuevo texto');\n      const attr = e.target.attributes['data-id'].value;\n      this.setState({\n        imChanged: true\n      });\n      saveComponentInfoToContext(code, attr, newText);\n    };\n\n    this.changeImage = e => {\n      const file = e.target.files[0]; // poner dentro de carpeta usuario y proyecto\n      // asi cuando borramos proyecto, borramos carpeta bucket\n\n      const storageRef = firebase.storage().ref(`${uuid()}`);\n\n      if (file.size > 20000) {\n        alert('Imagen demasiado grande. Elige una mas peque単a o hazle un resize');\n        return;\n      }\n\n      const task = storageRef.put(file);\n      task.on('state_changed', snapshot => {\n        let percentage = snapshot.bytesTransferred / snapshot.totalBytes * 100; // ir ense単ando progreso en front y bloquearlo de mientras\n\n        console.log(111, percentage);\n      }, error => {\n        console.error(2222, error.message);\n      }, async () => {\n        const downloadUrl = await task.snapshot.ref.getDownloadURL();\n        this.setState({\n          image1: downloadUrl\n        });\n      });\n    };\n\n    this.getComponentInfo = () => {\n      const {\n        userLayoutObj,\n        code\n      } = this.props;\n      return userLayoutObj.filter(c => c.code === code)[0].info;\n    };\n\n    this.state = {\n      imChanged: false\n      /*\n      info: {...this.props.info},\n      code: this.props.code, */\n\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextProps.mode !== this.props.mode) return true; // if(nextProps.userLayoutObj.length !== this.props.userLayoutObj.length) return true\n\n    if (!nextState.imChanged) return false;\n    this.setState({\n      imChanged: false\n    });\n    return true;\n  }\n\n  render() {\n    const {\n      mode,\n      moveComponent,\n      code,\n      deleteComponent\n    } = this.props;\n    const UserComp = MATCH_COMPONENTS[code];\n    const componentProps = {\n      info: this.getComponentInfo()\n    };\n\n    if (mode === 'edit') {\n      componentProps['changeInfo'] = this.changeInfo;\n      componentProps['updateInfo'] = this.updateInfo;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"user-component-base\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(UserComp, Object.assign({}, componentProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }), mode === \"edit\" && /*#__PURE__*/React.createElement(OptionsBar, {\n      code: code,\n      deleteComponent: deleteComponent,\n      moveComponent: moveComponent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 31\n      }\n    })));\n  }\n\n}\n\nUserComponentBase.propTypes = {\n  code: PropTypes.string\n};\nexport default withData(UserComponentBase);","map":{"version":3,"sources":["/home/ironhacker/Documents/M3/droy/src/components/droy/UserComponentBase.js"],"names":["React","Component","MATCH_COMPONENTS","PropTypes","withData","OptionsBar","UserComponentBase","constructor","props","changeInfo","e","code","saveComponentInfoToContext","newText","prompt","attr","target","attributes","value","setState","imChanged","changeImage","file","files","storageRef","firebase","storage","ref","uuid","size","alert","task","put","on","snapshot","percentage","bytesTransferred","totalBytes","console","log","error","message","downloadUrl","getDownloadURL","image1","getComponentInfo","userLayoutObj","filter","c","info","state","shouldComponentUpdate","nextProps","nextState","mode","render","moveComponent","deleteComponent","UserComp","componentProps","updateInfo","propTypes","string"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport MATCH_COMPONENTS from '../../utils/componentsMatching'\nimport PropTypes from 'prop-types'\nimport { withData } from '../../contexts/dataContext'\nimport OptionsBar from '../droy/OptionsBar'\nimport '../../styles/user-componentBase.css'\n\nclass UserComponentBase extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      imChanged: false\n      /*\n      info: {...this.props.info},\n      code: this.props.code, */\n    }\n  }\n\n  changeInfo = (e) => {\n    const { code } = this.props\n    const { saveComponentInfoToContext } = this.props\n    const newText = prompt('Inserta el nuevo texto')\n    const attr = e.target.attributes['data-id'].value\n    this.setState({ imChanged: true })\n    saveComponentInfoToContext(code, attr, newText)\n  }\n\n  changeImage = e => {\n    const file = e.target.files[0]\n    // poner dentro de carpeta usuario y proyecto\n    // asi cuando borramos proyecto, borramos carpeta bucket\n    const storageRef = firebase.storage().ref(`${uuid()}`)\n    if(file.size > 20000){\n      alert('Imagen demasiado grande. Elige una mas peque単a o hazle un resize')\n      return\n    }\n    const task = storageRef.put(file)\n    task.on('state_changed', (snapshot) => {\n      let percentage = (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n      // ir ense単ando progreso en front y bloquearlo de mientras\n      console.log(111, percentage)\n    }, (error) => {\n      console.error(2222, error.message)\n    }, async () => {\n      const downloadUrl = await task.snapshot.ref.getDownloadURL()\n      this.setState({image1: downloadUrl})\n    }) \n  }\n  \n\n\n  getComponentInfo = () => {\n    const { userLayoutObj, code } = this.props\n    return userLayoutObj.filter(c => c.code === code)[0].info\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if(nextProps.mode !== this.props.mode) return true\n    // if(nextProps.userLayoutObj.length !== this.props.userLayoutObj.length) return true\n    if(!nextState.imChanged) return false\n    this.setState({ imChanged: false })\n    return true\n  }\n  \n  \n  render () {\n    const { mode, moveComponent , code, deleteComponent  } = this.props\n    const UserComp = MATCH_COMPONENTS[code]\n    const componentProps = { info: this.getComponentInfo() }\n    if(mode === 'edit'){\n      componentProps['changeInfo'] = this.changeInfo\n      componentProps['updateInfo'] = this.updateInfo\n    }\n    return (\n      <div className=\"user-component-base\">\n        <UserComp {...componentProps}>\n          {mode === \"edit\" && <OptionsBar code={code} deleteComponent={deleteComponent} moveComponent={moveComponent}/>}\n        </UserComp>\n      </div>\n    )\n  }\n}\n\nUserComponentBase.propTypes = {\n  code: PropTypes.string\n}\n\nexport default withData(UserComponentBase)"]},"metadata":{},"sourceType":"module"}